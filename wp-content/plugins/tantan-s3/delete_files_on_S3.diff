Index: projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin-public.php
===================================================================
--- projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin-public.php (revision 14969)
+++ projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin-public.php (revision 14989)
@@ -21,5 +21,5 @@
         if ($this->options['wp-uploads'] && ($amazon = get_post_meta($postID, 'amazonS3_info', true))) {
             $accessDomain = $this->options['virtual-host'] ? $amazon['bucket'] : $amazon['bucket'].'.s3.amazonaws.com';
-            return 'http://'.$accessDomain.'/'.$amazon['key'];
+            return 'http://'.$accessDomain.'/'.$amazon['keys'][0];
         } else {
             return $url;
Index: projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin.php
===================================================================
--- projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin.php (revision 14971)
+++ projects/wpmu/trunk/wp-content/mu-plugins/wordpress-s3/class-plugin.php (revision 14989)
@@ -56,6 +56,9 @@
             add_filter('wp_update_attachment_metadata', array(&$this, 'wp_update_attachment_metadata'), 9, 2);
 			//can't delete mirrored files just yet
-			//add_filter('wp_get_attachment_metadata', array(&$this, 'wp_get_attachment_metadata'));
-			//add_filter('wp_delete_file', array(&$this, 'wp_delete_file'));
+			add_filter('wp_get_attachment_metadata', array(&$this, 'wp_get_attachment_metadata'), 10, 2);
+			add_filter('wp_delete_file', array(&$this, 'wp_delete_file'));
+			add_action('delete_attachment', array(&$this, 'delete_attachment'));
+			
+			
         }
     }  
@@ -134,32 +137,42 @@
     }
     
-
-	/*
-	Delete corresponding file from Amazon S3
-	*/
-	function wp_delete_file($file) {
-		return $file;
+    
+    //Delete the file(s) on S3
+    function delete_attachment($postid) {
+    
 		if (!$this->options) $this->options = get_option('tantan_wordpress_s3');
         
         if (!$this->options['wp-uploads'] || !$this->options['bucket'] || !$this->options['secret']) {
-            return $file;
-        }
-
-		if (is_array($this->meta)) {
+            return false;
+        }
+
+		if (is_array($this->meta) && $this->meta["postID"]==$postid) {
+			
 			require_once(dirname(__FILE__).'/lib.s3.php');
 	        $this->s3 = new TanTanS3($this->options['key'], $this->options['secret']);
 			$this->s3->setOptions($this->options);
-			if (deleteObject($this->meta['bucket'], $this->meta['key'])) {
-				
+			foreach ($this->meta['keys'] as $key) {
+				if ($this->s3->deleteObject($this->meta['bucket'], $key)) {
+					
+				}
 			}
-			$accessDomain = $this->options['virtual-host'] ? $this->meta['bucket'] : $this->meta['bucket'].'.s3.amazonaws.com';
-			return $file;
-            //return 'http://'.$accessDomain.'/'.$amazon['key'];
-            
-		}
+			return true;
+		} else {
+			error_log("delete_attachment(".$postid.") was called but we couldn't find the S3 metadata - ".$this->meta["postID"]);
+		}
+    }
+
+	function wp_delete_file($file) {
+
 		return $file;
+	
 	}
 	function wp_get_attachment_metadata($data=false, $postID=false) {
-		if (is_numeric($postID)) $this->meta = get_post_meta($postID, 'amazonS3_info', true);
+
+		if (is_numeric($postID)) {
+			$this->meta = get_post_meta($postID, 'amazonS3_info', true);
+			$this->meta["postID"] = $postID;
+		}
+		
 		return $data;
 	}
@@ -200,4 +213,6 @@
 			if ($this->s3->putObjectStream($this->options['bucket'], $prefix.$file['name'], $file)) {
 			    
+				$keys = array($prefix.$file['name']);
+			
 			    if ($data['thumb']) {
 			        $thumbpath = str_replace( basename( $data['file'] ), $data['thumb'], $data['file'] );
@@ -210,4 +225,10 @@
 			        
 			        $this->s3->putObjectStream($this->options['bucket'], $prefix.$filethumb['name'], $filethumb);
+			        
+			        //delete the local file
+			        unlink($thumbpath);
+			        
+			        $keys[] = $prefix.$filethumb['name'];
+			        
 			    } elseif (count($data['sizes'])) foreach ($data['sizes'] as $altName => $altSize) {
 					$altPath = str_replace( basename( $data['file'] ), $altSize['file'], $data['file'] );
@@ -220,4 +241,8 @@
 			        $this->s3->putObjectStream($this->options['bucket'], $prefix.$altMeta['name'], $altMeta);
 				
+			        //delete the local file
+			        unlink($altPath);
+			        
+			        $keys[] = $prefix.$altMeta['name'];
 				}
 			    
@@ -226,6 +251,9 @@
                 add_post_meta($postID, 'amazonS3_info', array(
                     'bucket' => $this->options['bucket'],
-                    'key' => $prefix.$file['name']
+                    'keys' => $keys
                     ));
+                    
+                //delete the local file
+                unlink($data['file']);
 			} else {
 			    
